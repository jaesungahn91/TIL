(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{751:function(a,e,t){"use strict";t.r(e);var n=t(2),s=Object(n.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"_0612"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0612"}},[a._v("#")]),a._v(" 0612")]),a._v(" "),t("h2",{attrs:{id:"jvm-메모리-구조-자바-7-8-기준"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm-메모리-구조-자바-7-8-기준"}},[a._v("#")]),a._v(" JVM 메모리 구조(자바 7,8 기준)")]),a._v(" "),t("p",[a._v("JVM 메모리 구조를 자바 7, 8버전 을 기준으로 알아보자.")]),a._v(" "),t("h1",{attrs:{id:"jvm-메모리-구조"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm-메모리-구조"}},[a._v("#")]),a._v(" JVM 메모리 구조")]),a._v(" "),t("ul",[t("li",[a._v("Java 7 Hotspot JVM 구조")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("<----- Java Heap -----\x3e             <--- Native Memory ---\x3e\n+------+----+----+-----+-----------+--------+--------------+\n| Eden | S0 | S1 | Old | Permanent | C Heap | Thread Stack |\n+------+----+----+-----+-----------+--------+--------------+\n                        <---------\x3e\n                       Permanent Heap\nS0: Survivor 0\nS1: Survivor 1\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("ul",[t("li",[a._v("Java 8 Hotspot JVM 구조")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("<----- Java Heap -----\x3e <--------- Native Memory ---------\x3e\n+------+----+----+-----+-----------+--------+--------------+\n| Eden | S0 | S1 | Old | Metaspace | C Heap | Thread Stack |\n+------+----+----+-----+-----------+--------+--------------+\n* Java Heap: JVM이 관리하는 영역\n* Native Memory: OS에서 관리하는 영역\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("p",[a._v("Java 7은 "),t("code",[a._v("Permanent Generation")]),a._v(" 영역이 존재하고, Java 8 이후 해당 영역은 삭제되고 "),t("code",[a._v("Metaspace")]),a._v(" 영역이 추가됐다.")]),a._v(" "),t("p",[a._v("Java7까지의 Permanent Generation 영역은 JVM 관리하는 메모리 영역이였지만 Java8 이후 추가된 Metaspace 영역은 OS에서 관리하는 Native 메모리 영역으로 변경되었다.")]),a._v(" "),t("h2",{attrs:{id:"permanent-generation-와-metaspace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#permanent-generation-와-metaspace"}},[a._v("#")]),a._v(" Permanent Generation 와 Metaspace")]),a._v(" "),t("p",[a._v("Permanent Generation과 Metaspace는 간단히 말해 Java의 Classloader가 로드한 Class의 Metadata를 저장하기 위해 Hotspot JVM에서 구현한 Method 영역이다.")]),a._v(" "),t("h3",{attrs:{id:"permanent-generation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#permanent-generation"}},[a._v("#")]),a._v(" Permanent Generation")]),a._v(" "),t("ul",[t("li",[a._v("Permanent Generation는 다음과 같은과 같은 정보를 저장한다.\n"),t("ul",[t("li",[a._v("Class의 Meta정보 (pkg path 정보라고 보면 됨, text 정보)")]),a._v(" "),t("li",[a._v("Method의 Meta 정보")]),a._v(" "),t("li",[a._v("Static Object")]),a._v(" "),t("li",[a._v("상수화된 String Object")])])]),a._v(" "),t("li",[a._v("Permanent Generation은 JVM에 의해 크기가 강제되던 영역이다.")]),a._v(" "),t("li",[a._v("메모리 옵션\n"),t("ul",[t("li",[a._v("-XX:PermSize=N      --\x3e PermGen Default Size 설정")]),a._v(" "),t("li",[a._v("-XX:MaxPermSize=N   --\x3e PermGen Max Size 설정")])])])]),a._v(" "),t("h3",{attrs:{id:"metaspace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#metaspace"}},[a._v("#")]),a._v(" Metaspace")]),a._v(" "),t("ul",[t("li",[a._v("Metaspace는 Permanent Generation과 동일하게 class들의 metadata가 저장되는 공간이다.")]),a._v(" "),t("li",[a._v("Metaspace는 Permanent Generation과 달리 Native Memory 영역에 위치한다.")]),a._v(" "),t("li",[a._v("Metaspace는 Native Memory 영역에 위치하므로 OS가 자동으로 크기를 조절한다.\n"),t("ul",[t("li",[a._v("옵션으로 Metaspace의 크기를 줄일 수도 있다.\n"),t("ul",[t("li",[a._v("-XX:MetaspaceSize=N    --\x3e Metaspace Default Size 설정")]),a._v(" "),t("li",[a._v("-XX:MaxMetaspaceSize=N --\x3e Metaspace Max Size 설정")])])])])]),a._v(" "),t("li",[a._v("Java 8부터는 Permanent Generation 관련 JVM 옵션은 무시한다.")])]),a._v(" "),t("h3",{attrs:{id:"변경된-사항"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#변경된-사항"}},[a._v("#")]),a._v(" 변경된 사항")]),a._v(" "),t("ul",[t("li",[a._v("class meta-data는 native memory로 이동된 Metaspace에 저장하고 permanent에 저장했던 static 변수와 interned strings는 heap 영역으로 보내져서 GC의 대상이 되도록 했다.")])]),a._v(" "),t("table",[t("thead",[t("tr",[t("th"),a._v(" "),t("th",[a._v("Java 7")]),a._v(" "),t("th",[a._v("Java 8")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("Class 메타 데이터")]),a._v(" "),t("td",[a._v("저장")]),a._v(" "),t("td",[a._v("저장")])]),a._v(" "),t("tr",[t("td",[a._v("Method 메타 데이터")]),a._v(" "),t("td",[a._v("저장")]),a._v(" "),t("td",[a._v("저장")])]),a._v(" "),t("tr",[t("td",[a._v("Static Object 변수, 상수")]),a._v(" "),t("td",[a._v("저장")]),a._v(" "),t("td",[a._v("Heap 영역으로 이동")])]),a._v(" "),t("tr",[t("td",[a._v("메모리 튜닝")]),a._v(" "),t("td",[a._v("Heap, Perm 영역 튜닝")]),a._v(" "),t("td",[a._v("Heap 튜닝, Native 영역은 OS가 동적 조정")])]),a._v(" "),t("tr",[t("td",[a._v("메모리 옵션")]),a._v(" "),t("td",[t("code",[a._v("-XX:PermSize")]),a._v(" "),t("br"),t("code",[a._v("-XX:MaxPermSize")])]),a._v(" "),t("td",[t("code",[a._v("-XX:MetaspaceSize")]),a._v(" "),t("br"),t("code",[a._v("-XX:MaxMetaspaceSize")])])])])]),a._v(" "),t("ul",[t("li",[a._v("PermGen에 속한 Method area가 클래스 변수를 저장한다고 알고 있다면 이해하기 쉽지 않다. static 변수는 클래스 변수로 명시적 null 선언이 되지 않으면 gc되어서는 안되는 변수다. Method area가 클래스 변수를 저장한다고 이해하는 시점에서 오해가 발생한다 Method area는 class의 meat-data를 저장할 뿐 실질적인 객체와 데이터는 Method area 바깥의 PermGen에 저장됨을 알아야 한다.")])]),a._v(" "),t("h3",{attrs:{id:"결론"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#결론"}},[a._v("#")]),a._v(" 결론")]),a._v(" "),t("ul",[t("li",[a._v("Permanent Genration은 JVM이 관리하는 영역이라 사이즈 제한이 있었다. 허나 자바 8부터는 Metaspace가 Native 메모리를 이용함으로서  기존과 비교해 큰 메모리 영역을 사용할 수 있게 되었다.")]),a._v(" "),t("li",[a._v("Perm 영역 크기로 인한 java.lang.OutOfMemoryError를 해결하게 됐습니다.")])])])}),[],!1,null,null,null);e.default=s.exports}}]);