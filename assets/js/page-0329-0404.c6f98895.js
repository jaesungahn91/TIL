(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{673:function(t,a,s){"use strict";s.r(a);var n=s(2),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_0329-0404"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0329-0404"}},[t._v("#")]),t._v(" 0329 - 0404")]),t._v(" "),s("h2",{attrs:{id:"_0329-log"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0329-log"}},[t._v("#")]),t._v(" 0329 - log")]),t._v(" "),s("h4",{attrs:{id:"slf4j"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#slf4j"}},[t._v("#")]),t._v(" SLF4J")]),t._v(" "),s("blockquote",[s("p",[t._v("Simple Logging Facade for Java 의 약자로 logging framework들을 추상화 해 놓은 것. Facade Pattern을 적용한 logging framework이다.")])]),t._v(" "),s("h4",{attrs:{id:"logback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#logback"}},[t._v("#")]),t._v(" Logback")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Spring Boot는 logback이 기본으로 설정, 별도로 라이브러리를 추가 하지 않아도 된다.")]),t._v(" "),s("ul",[s("li",[t._v("spring-boot-starter-web 안에 spring-boot-starter-logging 구현체 존재.")])])]),t._v(" "),s("li",[s("p",[t._v("logback-spring.xml")])])]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token prolog"}},[t._v('<?xmlversion="1.0"encoding="UTF-8"?>')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("configuration")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--프로퍼티--\x3e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\x3c!--<propertyname="LOGS_PATH"value="./logs"/>--\x3e')]),t._v('\n\n<appendername="CONSOLE"class="ch.qos.logback.core.ConsoleAppender">\n<layoutclass="ch.qos.logback.classic.PatternLayout">\n'),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("%highlight(%-5p):[%d{yyyy-MM-ddHH:mm:ss:mmm}]%cyan(%c)-%m%n{2,CALLER_DISPLAY_EVAL}"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("layout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("appender")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('\n\n<appendername="SAMPLE"class="ch.qos.logback.core.ConsoleAppender">\n'),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("encoder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("[%d{yyyy-MM-ddHH:mm:ss}:%-3relative][%thread]%-5level%logger{35}-%msg%n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("encoder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("appender")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('\n\n<appendername="COM_FILE"class="ch.qos.logback.core.rolling.RollingFileAppender">\n<filterclass="ch.qos.logback.classic.filter.ThresholdFilter">\n'),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("level")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("INFO"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("level")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("prudent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("true"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("prudent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('\n<rollingPolicyclass="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n'),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("fileNamePattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("${ROUTER_HOME}/log/router_log.%d{yyyy-MM-dd}.log"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("fileNamePattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("maxHistory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("30"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("maxHistory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("rollingPolicy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("encoder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("%-5p:[%d{yyyy-MM-ddHH:mm:ss:mmm}]%c-%m%n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("encoder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("appender")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('\n\n<loggername="com.ese"additivity="false"level="INFO">\n<appender-refref="CONSOLE"/>\n<appender-refref="COM_FILE"/>\n'),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("logger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--RootLogger--\x3e")]),t._v('\n<rootlevel="INFO">\n<appender-refref="CONSOLE"/>\n'),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("root")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("configuration")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n")])])]),s("ul",[s("li",[t._v("appender : log의 형태를 설정")]),t._v(" "),s("li",[t._v("logger : 설정한 appender를 참조하여 package와 level을 설정")]),t._v(" "),s("li",[t._v("property : 프로퍼티를 설정")])]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"_0330-maven-wrapper"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0330-maven-wrapper"}},[t._v("#")]),t._v(" 0330 - Maven Wrapper")]),t._v(" "),s("h4",{attrs:{id:"구성"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#구성"}},[t._v("#")]),t._v(" 구성")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("https://github.com/takari/takari-maven-plugin"),s("br"),t._v("\nMaven wrapper plugin 사용")])]),t._v(" "),s("li",[s("p",[t._v("intellij 기준 [ ctrl + ctrl ]"),s("br"),t._v(" "),s("code",[t._v("mvn (모듈명) -N io.takari:maven:wrapper 실행")]),s("br"),t._v("\n=> .mvn mvnw, mvnw.cmd 생성")])])]),t._v(" "),s("h4",{attrs:{id:"mvnw-mvwn-cmd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mvnw-mvwn-cmd"}},[t._v("#")]),t._v(" mvnw / mvwn,cmd")]),t._v(" "),s("ul",[s("li",[t._v("mvnw : Maven 대신에 사용되는 실행 가능한 unix shell script.")]),t._v(" "),s("li",[t._v("mvwn.cmd : mvnw 의 윈도우 배치 버전 shell script.")])]),t._v(" "),s("h4",{attrs:{id:"mvn"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mvn"}},[t._v("#")]),t._v(" .mvn")]),t._v(" "),s("ul",[s("li",[t._v("MavenWrapperDownloader.java : 자바클래스 파일인 이파일을 컴파일링하여 메이븐 다운로드")]),t._v(" "),s("li",[t._v("maven-wrapper.jar : wrappper shell scripts 로 부터 maven 을 실행하고, 다운로드 하는데 사용")]),t._v(" "),s("li",[t._v("maven-wrapper.properties : Maven 이 존재하지 않는 경우 다운로드하기 위한 URL 을 명시하기 위해서 사용")])]),t._v(" "),s("h4",{attrs:{id:"maven-wrapper-실행하기"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#maven-wrapper-실행하기"}},[t._v("#")]),t._v(" Maven Wrapper 실행하기")]),t._v(" "),s("ul",[s("li",[t._v("Maven/target Clean 및 build\n"),s("ul",[s("li",[t._v("./mvnw clean package")])])]),t._v(" "),s("li",[t._v("Maven 으로 Spring boot 를 백그라운드로 실행\n"),s("ul",[s("li",[t._v("./mvnw spring-boot:run &")])])]),t._v(" "),s("li",[t._v("mvnw 로 설치된 maven 배포 경로\n"),s("ul",[s("li",[t._v("~/.m2/wrapper/dists")])])])]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"_0331-github-저장소-repository-미러링"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0331-github-저장소-repository-미러링"}},[t._v("#")]),t._v(" 0331 - GitHub 저장소(repository) 미러링")]),t._v(" "),s("blockquote",[s("p",[t._v("미러링이란 commit log를 유지하며 clone")])]),t._v(" "),s("h4",{attrs:{id:"저장소-미러링"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#저장소-미러링"}},[t._v("#")]),t._v(" 저장소 미러링")]),t._v(" "),s("ol",[s("li",[t._v("복사하고자하는 저장소의 bare clone 생성")])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone --bare "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("복사하고자하는 저장소의 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" 주소"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("새로운 저장소로 mirror-push")])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("복사하고자하는 저장소의 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" 주소"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push --mirror "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("붙여놓을저장소의 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" 주소"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("1번에서 생성된 저장소 삭제")])]),t._v(" "),s("h4",{attrs:{id:"_100mb를-넘어가는-파일을-가진-저장소-미러링"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_100mb를-넘어가는-파일을-가진-저장소-미러링"}},[t._v("#")]),t._v(" 100MB를 넘어가는 파일을 가진 저장소 미러링")]),t._v(" "),s("ol",[s("li",[t._v("git lfs와 BFG Repo Cleaner 설치")]),t._v(" "),s("li",[t._v("복사하고자 하는 저장소의 bare clone 생성")])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone --mirror "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("복사하고자하는저장소의 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" 주소"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("commit history에서 large file을 찾아 트랙킹")])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" filter-branch --tree-filter "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git lfs track \"*.{zip,jar}\"'")]),t._v(" -- --all\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[t._v("BFG를 이용하여 해당 파일들을 git lfs로 변경")])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("java -jar ~/usr/bfg-repo-cleaner/bfg-1.13.0.jar --convert-to-git-lfs "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*.zip'")]),t._v("\njava -jar ~/usr/bfg-repo-cleaner/bfg-1.13.0.jar --convert-to-git-lfs "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*.jar'")]),t._v("\n")])])]),s("ol",{attrs:{start:"5"}},[s("li",[t._v("새로운 저장소로 mirror-push")])]),t._v(" "),s("div",{staticClass:"language-노 extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("cd {복사하고자하는저장소의 git 주소}\ngit push --mirror {붙여놓을저장소의 git wnth}\n")])])]),s("ol",{attrs:{start:"6"}},[s("li",[t._v("1번에서 생성된 저장소 삭제")])]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"_0401-웹-애플리케이션-정리"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0401-웹-애플리케이션-정리"}},[t._v("#")]),t._v(" 0401 - 웹 애플리케이션 정리")]),t._v(" "),s("blockquote",[s("p",[t._v("웹 애플리케이션이란 HTTP 요청을 받고 HTTP 응답을 만드는 코드를 작성한다는것"),s("br"),t._v("\n이점을 인지하고 개발하는게 중요 => 웹 기술 빠르게 파악가능")])]),t._v(" "),s("h4",{attrs:{id:"http-요청"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-요청"}},[t._v("#")]),t._v(" HTTP 요청")]),t._v(" "),s("ul",[s("li",[t._v("URI")]),t._v(" "),s("li",[t._v("METHOD")]),t._v(" "),s("li",[t._v("HEADER")]),t._v(" "),s("li",[t._v("BODY")])]),t._v(" "),s("p",[t._v("스프링은 HTTP 요청을 통해 두가지 작업을 한다.")]),t._v(" "),s("ol",[s("li",[t._v("요청을 처리할 컨트롤러를 찾는 작업 - Mapping")]),t._v(" "),s("li",[t._v("컨트롤러 메소드에 요청 정보를 어떤 식으로 전달할까를 결정하는 작업")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RequestMapping")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HTTP 요청중 URI 부분으로 매핑  \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 보통 BODY는 매핑에 사용되지않고"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 나머지 구성요소로함"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),s("p",[t._v("매핑에서 컨트롤러 메소드까지 결정하면 그 다음은 파라미터에 어떻게 HTTP 요청을 가공해서 넘겨줄 것인가를 정하는 것."),s("br"),t._v("\n(바인딩하는 방법은 관례적으로 30가지가 존재)")]),t._v(" "),s("h4",{attrs:{id:"http-응답"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-응답"}},[t._v("#")]),t._v(" HTTP 응답")]),t._v(" "),s("blockquote",[s("p",[t._v("HTTP 응답은 크게")])]),t._v(" "),s("ul",[s("li",[t._v("상태 코드")]),t._v(" "),s("li",[t._v("헤더")]),t._v(" "),s("li",[t._v("바디")])]),t._v(" "),s("p",[t._v("가장먼저 상태코드를 넣고 헤더 요소 중 "),s("code",[t._v("content type")]),t._v("에 따라 바디에 html을 넣을지, json을 넣을지, binary를 인코딩해서 넣을지 등등을 결정.")]),t._v(" "),s("p",[t._v("*** 결론은 웹 개발에서 가장 중요시 해야하는 것은 '요청과 응답이 어떻게 다뤄지고 만들어지는가' 이다.")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("정리\n"),s("img",{attrs:{width:"725",alt:"웹 개발",src:"https://user-images.githubusercontent.com/49400801/113293733-1a5e4b80-9331-11eb-805d-319744129028.png"}})]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"_0402-데드락-deadlock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0402-데드락-deadlock"}},[t._v("#")]),t._v(" 0402 - 데드락(DeadLock)")]),t._v(" "),s("blockquote",[s("p",[t._v("프로세스가 자원을 얻지 못해서 다음 처리를 하지 못하는 상태"),s("br"),t._v("\n'교착 상태'라고도 부름"),s("br"),t._v("\n시스템적으로 한정된 자원을 여러 곳에서 사용하려고 할 때 발생")])]),t._v(" "),s("h4",{attrs:{id:"데드락이-일어나는-경우"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#데드락이-일어나는-경우"}},[t._v("#")]),t._v(" 데드락이 일어나는 경우")]),t._v(" "),s("p",[t._v("프로세스 1과 2가 자원1,2를 모두 얻어야 한다고 가정했을때")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("t1 : 프로세스 1이 자원1을 얻음 / 프로세스2가 자원 2를 얻음\nt2 : 프로세스1은 자원2를 기다림 / 프로세스2는 자원1을 기다림\n")])])]),s("p",[t._v("현재 서로 원하는 자원이 상대방에 할당되어 있어서 두 프로세스는 무한정 wait 상태에 빠짐"),s("br"),t._v("\n-> 이게 DeadLock")]),t._v(" "),s("h4",{attrs:{id:"주로-발생하는-경우"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#주로-발생하는-경우"}},[t._v("#")]),t._v(" [주로 발생하는 경우]")]),t._v(" "),s("ul",[s("li",[t._v("멀티 프로그래밍 환경에서 한정된 자원을 얻기 위해 서로 경쟁하는 상황 발생")]),t._v(" "),s("li",[t._v("한 프로세스가 자원을 요쳥했을 때, 동시에 그 자원을 사용할 수 없는 상황이 발생할 수 있음. 이때 프로세스는 대기 상태로 들어감")]),t._v(" "),s("li",[t._v("대기상태로 들어간 프로세스들이 실행 상태로 변경될 수 없을 때 '교착 상태' 발생")])]),t._v(" "),s("h4",{attrs:{id:"데드락-발생-조건"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#데드락-발생-조건"}},[t._v("#")]),t._v(" 데드락 발생 조건")]),t._v(" "),s("blockquote",[s("p",[t._v("4가지 모두 성립해야 데드락 발생(하나라도 성립하지 않으면 데드락 문제 해결 가능)")])]),t._v(" "),s("ol",[s("li",[t._v("상호 배제(Mutual exclusion)")])]),t._v(" "),s("ul",[s("li",[t._v("자원은 한 프로세스만 사용할 수 있음")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("점유 대기(Hold and wait)")])]),t._v(" "),s("ul",[s("li",[t._v("최소한 하나의 자원을 점유하고 있으면서 다른 프로세스에 할당되어 사용하고 있는 자원을 추가로 점유하기 위해 대기하는 프로세스가 존재해야 함")])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("비선점(No preemption)")])]),t._v(" "),s("ul",[s("li",[t._v("다른 프로세스에 할당된 자원은 사용이 끝날 때까지 강제로 빼앗을 수 없음")])]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("순환 대기(Circular wait)")])]),t._v(" "),s("ul",[s("li",[t._v("프로세스 집합에서 순환 형태로 자원을 대기하고 있어야 함")])]),t._v(" "),s("h4",{attrs:{id:"데드락-처리"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#데드락-처리"}},[t._v("#")]),t._v(" 데드락 처리")]),t._v(" "),s("ul",[s("li",[t._v("교착 상태를 예방 & 회피")])]),t._v(" "),s("ol",[s("li",[t._v("예방(prevention)"),s("br"),t._v("\n교착 상태 발생 조건 중 하나를 제거하면서 해결한다 (자원 낭비 엄청 심함)\n"),s("ul",[s("li",[t._v("상호배제 부정 : 여러 프로세스가 공유 자원 사용")]),t._v(" "),s("li",[t._v("점유대기 부정 : 프로세스 실행전 모든 자원을 할당")]),t._v(" "),s("li",[t._v("비선점 부정 : 자원 점유 중인 프로세스가 다른 자원을 요구할 때 가진 자원 반납")]),t._v(" "),s("li",[t._v("순환대기 부정 : 자원에 고유번호 할당 후 순서대로 자원 요구")])])]),t._v(" "),s("li",[t._v("회피(avoidance)"),s("br"),t._v("\n교착 상태 발생 시 피해나가는 방법"),s("br"),t._v("\n은행원 알고리즘(Banker's Algorithm)\n"),s("ul",[s("li",[t._v("은행에서 모든 고객의 요구가 충족되도록 현금을 할당하는데서 유래함")]),t._v(" "),s("li",[t._v("프로세스가 자원을 요구할 때, 시스템은 자원을 할당한 후에도 안정 상태로 남아있게 되는지 사전에 검사하여 교착상태 회피")]),t._v(" "),s("li",[t._v("안정 상태면 자원 할당, 아니면 다른 프로세스들이 자원 해지까지 대기")])])])]),t._v(" "),s("ul",[s("li",[t._v("교착 상태를 탐지 & 회복"),s("br"),t._v("\n교착 상태가 되도록 허용한 다음 회복시키는 방법")])]),t._v(" "),s("ol",[s("li",[t._v("탐지(Detection)"),s("br"),t._v("\n자원 할당 그래프를 통해 교착 상태를 탐지함"),s("br"),t._v("\n자원 요청 시, 탐지 알고리즘을 실행시켜 그에 대한 오버헤드 발생함")]),t._v(" "),s("li",[t._v("회복(Recovery)"),s("br"),t._v("\n교착 상태 일으킨 프로세스를 종료하거나, 할당된 자원을 해제시켜 회복시키는 방법\n"),s("ul",[s("li",[t._v("프로세스 종료 방법\n"),s("ul",[s("li",[t._v("교착 상태의 프로세스를 모두 중지")]),t._v(" "),s("li",[t._v("교착 상태가 제거될 때까지 하나씩 프로세스 중지")])])]),t._v(" "),s("li",[t._v("자원 선점 방법\n"),s("ul",[s("li",[t._v("교착 상태의 프로세스가 점유하고 있는 자원을 선점해 다른 프로세스에게 할당 (해당 프로세스 일시정지 시킴)")]),t._v(" "),s("li",[t._v("우선 순위가 낮은 프로세스나 수행 횟수가 적은 프로세스 위주로 프로세스 자원 선점")])])])])])]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"_0403-object-클래스-wait-notify-notifyall"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0403-object-클래스-wait-notify-notifyall"}},[t._v("#")]),t._v(" 0403 - Object 클래스 wait, notify, notifyAll")]),t._v(" "),s("blockquote",[s("p",[t._v("Java 최상위 클래스 = Object 클래스")])]),t._v(" "),s("h4",{attrs:{id:"object-class가-갖고-있는-메서드"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-class가-갖고-있는-메서드"}},[t._v("#")]),t._v(" Object Class가 갖고 있는 메서드")]),t._v(" "),s("ul",[s("li",[t._v("toString()")]),t._v(" "),s("li",[t._v("hashCode()")]),t._v(" "),s("li",[t._v("wait()"),s("br"),t._v("\n갖고 있던 고유 lock 해제, Thread를 잠들게 함")]),t._v(" "),s("li",[t._v("notify()"),s("br"),t._v("\n잠들던 Thread 중 임의의 하나를 깨움.")]),t._v(" "),s("li",[t._v("notifyAll()\n잠들어 있던 Thread를 모두 깨움.")])]),t._v(" "),s("p",[s("code",[t._v("wait, notify, notifyAll : 호출하는 스레드가 반드시 고유 락을 갖고 있어야함.")])]),t._v(" "),s("ul",[s("li",[t._v("Synchronized 블록 내에서 실행되어야 함.")]),t._v(" "),s("li",[t._v("그 블록 안에서 호출하는 경우 IllegalMonitorStateException 발생.")])])])}),[],!1,null,null,null);a.default=r.exports}}]);